<?xml version="1.0" encoding="UTF-8"?>

<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:context="http://www.springframework.org/schema/context"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd" >
 
    <!--<debug></debug>-->
    <!--the active profile is setup in portal.properties and web.xml-->
    <b:beans profile="ldap"> 
        <b:bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <b:property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
            <b:property name="searchSystemEnvironment" value="true" />
            <b:property name="ignoreResourceNotFound" value="true" />
            <b:property name="locations">
                <b:list>
                    <!--<b:value>file:///${PORTAL_HOME}/portal.properties</b:value>-->
                    <b:value>classpath:portal.properties</b:value>
                </b:list>
            </b:property>
        </b:bean>
 
        <!-- support for general annotations within class definitions (used in AccessControl) -->
        <context:annotation-config/>

        <!-- we use @PostFilter and @PreAuthorize -->
        <global-method-security pre-post-annotations="enabled">
            <expression-handler ref="expressionHandler"/>
        </global-method-security>

        <!-- custom expression handler -->
        <b:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
            <b:property name="permissionEvaluator" ref="customPermissionEvaluator"/>
        </b:bean>
        <b:bean id="customPermissionEvaluator" class="org.cbioportal.security.spring.CancerStudyPermissionEvaluator"/>

        <!-- static resources not processed by spring security filters -->
        <http pattern="/css/**" security="none"/>
 
        <http pattern="/images/**" security="none"/>
   
        <http pattern="/js/**" security="none"/>
        <http pattern="/reactapp/**" security="none"/>
        <http pattern="/chuv*" security="none"/>
  
    
        <http pattern="/gfx/**" security="none"/>
        <b:bean id="mySoarianFilter" class="org.cbioportal.security.spring.authentication.marian.MyAnonymousAuthenticationFilter">
            <b:constructor-arg name="key" value="mykey"/>
        </b:bean>

        <b:bean id="myFormFilter" class= "org.cbioportal.security.spring.authentication.marian.MyUsernamePasswordAuthenticationFilter">
            <b:property name="authenticationManager" ref="authenticationManager"/>
            <b:property name="failureUrl" value="/login.jsp"/>
        </b:bean>
    
        <!-- beans used to compare token returned by authentication-provider against portal user db tables -->
        <b:bean id="userDetailsService" class="org.cbioportal.security.spring.authentication.marian.MarianUserDetailsService">
        </b:bean>

        <!-- configure the social authentication provider which processes authentication requests -->
        <b:bean id="myAuthenticationProvider" class="org.cbioportal.security.spring.authentication.marian.MyDaoAuthenticationProvider">
            <b:property name="userDetailsService" ref="userDetailsService"/>
        </b:bean>
    
        <b:bean id="authenticationEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
            <b:property name="loginFormUrl" value="/login.jsp"/>
        </b:bean>
    
        <!--    <http use-expressions="true"  >
            <intercept-url pattern="/chuv*" access="permitAll"/>
            <anonymous enabled="false"/>
            <session-management session-fixation-protection="none" />
        </http>-->
    
        <http use-expressions="true" entry-point-ref="authenticationEntryPoint">
            <!--    <http use-expressions="true" auto-config="true" >-->
            <!--<form-login login-page="/login.jsp" login-processing-url="/j_spring_security_check" default-target-url="/index.do" />-->
            <logout     logout-success-url="/login.jsp?logout_success=true" delete-cookies="JSESSIONID" />
            <custom-filter position="PRE_AUTH_FILTER" ref="mySoarianFilter" />
            <custom-filter position="FORM_LOGIN_FILTER" ref="myFormFilter" />
            <intercept-url pattern="/auth/*" access="permitAll"/>
            <intercept-url pattern="/favicon.ico" access="permitAll"/>
            <intercept-url pattern="/login.jsp*" access="permitAll"/>
            <!--<intercept-url pattern="/chuv*" access="permitAll"/>-->
            <intercept-url pattern="/webservice.do*" access="isAuthenticated() or hasIpAddress('127.0.0.1')"/>
            <intercept-url pattern="/**" access="isAuthenticated()"/>

            <!-- to enable access from matlab, r, python, etc clients -->
            <!--Session-management related functionality is implemented by the addition of a SessionManagementFilter to the filter stack.-->
            <session-management session-fixation-protection="none" />
        
        </http>
        <!--All filters which require a reference to the AuthenticationManager will be automatically injected with the internal instance created by the namespace configuration-->
        <!--    <authentication-manager>
            <authentication-provider>
                <user-service>
                    <user name="test" password="1234" authorities="ROLE_USER" /> 
                    <user name="test1" password="1234" authorities="ROLE_USER" />
                </user-service>
            </authentication-provider>
        </authentication-manager>-->
    
   
        <!--    This creates an instance of ProviderManager class, 
        which needs to be configured with a list of one or more AuthenticationProvider instances.
        These can either be created using syntax elements provided by the namespace, or they can be standard bean definitions, 
        marked for addition to the list using the authentication-provider element.-->
        <authentication-manager alias="authenticationManager">
            <!--alias This attribute allows you to define an alias name for the internal instance for use in your own configuration. 
            Another common requirement is that another bean in the context may require a reference to the AuthenticationManager
            -->
            <!--A reference to a bean that implements UserDetailsService that may be created using the standard bean element or the custom user-service element.-->
            <!--        <authentication-provider user-service-ref="userDetailsService"> 
            </authentication-provider>-->
            <!--ref Defines a reference to a bean that implements `AuthenticationProvider.-->
            <!--        Unless used with a ref attribute, this element is shorthand for configuring a DaoAuthenticationProvider. 
            DaoAuthenticationProvider loads user information from a UserDetailsService and compares the username/password 
            combination with the values supplied at login. 
    The UserDetailsService instance can be defined either 
            by using an available namespace element ( jdbc-user-service or by using the user-service-ref attribute 
            to point to a bean defined elsewhere in the application context). -->
            <authentication-provider ref="myAuthenticationProvider"/>
        </authentication-manager>
    </b:beans>
    <!-- authenticate is off beans --> 
    <b:beans profile="false">
        <global-method-security pre-post-annotations="disabled"/>
        <http pattern="/**" security="none"/>
    </b:beans>
</b:beans>
